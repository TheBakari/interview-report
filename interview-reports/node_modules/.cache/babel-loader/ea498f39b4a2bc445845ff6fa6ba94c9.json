{"ast":null,"code":"/**\r\n * @param {Date} date \r\n * @returns {string} date string in the format \"dd. mm. yyyy\"\r\n */\nexport function formatDate(date) {\n  let d = date.getDate();\n  if (d < 10) d = \"0\" + d;\n  let m = date.getMonth() + 1;\n  if (m < 10) m = \"0\" + m;\n  let y = date.getFullYear();\n  return d + \". \" + m + \". \" + y + \".\";\n}\nexport function formatDateForHtmlInput(date) {\n  let d = date.getDate();\n  if (d < 10) d = \"0\" + d;\n  let m = date.getMonth() + 1;\n  if (m < 10) m = \"0\" + m;\n  let y = date.getFullYear();\n  return [y, m, d].join(\"-\");\n}\n/**\r\n * \r\n * @param {string} stringToSearch \r\n * @param {string} queryString \r\n * @returns true if stringToSearch includes all of the words in query string, \r\n * in any order (so if one types the surname before the first name,\r\n * the return val is still true)\r\n */\n\nexport const includesIgnoreCase = (stringToSearch, queryString) => {\n  if (queryString.length === 0) return true;\n  queryString = queryString.trim();\n  let queries = queryString.split(/\\s+/);\n\n  for (let i = 0; i < queries.length; i++) {\n    if (i === queries.length - 1) queries[i] = new RegExp(\"\\\\b\" + queries[i], \"i\");else queries[i] = new RegExp(\"\\\\b\" + queries[i] + \"\\\\b\", \"i\");\n  }\n\n  for (let i = 0; i < queries.length; i++) {\n    if (!stringToSearch.match(queries[i])) return false;\n  }\n\n  return true;\n};","map":{"version":3,"sources":["C:/Users/Nikola/Desktop/interview-reports/interview-reports/src/utilities/helpers.js"],"names":["formatDate","date","d","getDate","m","getMonth","y","getFullYear","formatDateForHtmlInput","join","includesIgnoreCase","stringToSearch","queryString","length","trim","queries","split","i","RegExp","match"],"mappings":"AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,UAAT,CAAoBC,IAApB,EAA0B;AAC/B,MAAIC,CAAC,GAAGD,IAAI,CAACE,OAAL,EAAR;AACA,MAAID,CAAC,GAAG,EAAR,EAAYA,CAAC,GAAG,MAAMA,CAAV;AACZ,MAAIE,CAAC,GAAGH,IAAI,CAACI,QAAL,KAAkB,CAA1B;AACA,MAAID,CAAC,GAAG,EAAR,EAAYA,CAAC,GAAG,MAAMA,CAAV;AACZ,MAAIE,CAAC,GAAGL,IAAI,CAACM,WAAL,EAAR;AACA,SAAOL,CAAC,GAAG,IAAJ,GAAWE,CAAX,GAAe,IAAf,GAAsBE,CAAtB,GAA0B,GAAjC;AACD;AAED,OAAO,SAASE,sBAAT,CAAgCP,IAAhC,EAAsC;AAC3C,MAAIC,CAAC,GAAGD,IAAI,CAACE,OAAL,EAAR;AACA,MAAID,CAAC,GAAG,EAAR,EAAYA,CAAC,GAAG,MAAMA,CAAV;AACZ,MAAIE,CAAC,GAAGH,IAAI,CAACI,QAAL,KAAkB,CAA1B;AACA,MAAID,CAAC,GAAG,EAAR,EAAYA,CAAC,GAAG,MAAMA,CAAV;AACZ,MAAIE,CAAC,GAAGL,IAAI,CAACM,WAAL,EAAR;AACA,SAAQ,CAACD,CAAD,EAAIF,CAAJ,EAAOF,CAAP,CAAD,CAAYO,IAAZ,CAAiB,GAAjB,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,kBAAkB,GAAG,CAACC,cAAD,EAAiBC,WAAjB,KAAiC;AACjE,MAAIA,WAAW,CAACC,MAAZ,KAAuB,CAA3B,EAA8B,OAAO,IAAP;AAC9BD,EAAAA,WAAW,GAAIA,WAAW,CAACE,IAAZ,EAAf;AACA,MAAIC,OAAO,GAAGH,WAAW,CAACI,KAAZ,CAAkB,KAAlB,CAAd;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACF,MAA5B,EAAoCI,CAAC,EAArC,EAAyC;AACvC,QAAIA,CAAC,KAAKF,OAAO,CAACF,MAAR,GAAiB,CAA3B,EAA8BE,OAAO,CAACE,CAAD,CAAP,GAAa,IAAIC,MAAJ,CAAW,QAAQH,OAAO,CAACE,CAAD,CAA1B,EAA+B,GAA/B,CAAb,CAA9B,KACKF,OAAO,CAACE,CAAD,CAAP,GAAa,IAAIC,MAAJ,CAAW,QAAQH,OAAO,CAACE,CAAD,CAAf,GAAqB,KAAhC,EAAuC,GAAvC,CAAb;AACN;;AACD,OAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,OAAO,CAACF,MAA5B,EAAoCI,CAAC,EAArC,EAAyC;AACvC,QAAI,CAACN,cAAc,CAACQ,KAAf,CAAqBJ,OAAO,CAACE,CAAD,CAA5B,CAAL,EAAuC,OAAO,KAAP;AACxC;;AAED,SAAO,IAAP;AACD,CAdM","sourcesContent":["\r\n/**\r\n * @param {Date} date \r\n * @returns {string} date string in the format \"dd. mm. yyyy\"\r\n */\r\nexport function formatDate(date) {\r\n  let d = date.getDate();\r\n  if (d < 10) d = \"0\" + d;\r\n  let m = date.getMonth() + 1;\r\n  if (m < 10) m = \"0\" + m;\r\n  let y = date.getFullYear();\r\n  return d + \". \" + m + \". \" + y + \".\";\r\n}\r\n\r\nexport function formatDateForHtmlInput(date) {\r\n  let d = date.getDate();\r\n  if (d < 10) d = \"0\" + d;\r\n  let m = date.getMonth() + 1;\r\n  if (m < 10) m = \"0\" + m;\r\n  let y = date.getFullYear();\r\n  return ([y, m, d]).join(\"-\");\r\n}\r\n/**\r\n * \r\n * @param {string} stringToSearch \r\n * @param {string} queryString \r\n * @returns true if stringToSearch includes all of the words in query string, \r\n * in any order (so if one types the surname before the first name,\r\n * the return val is still true)\r\n */\r\nexport const includesIgnoreCase = (stringToSearch, queryString) => {\r\n  if (queryString.length === 0) return true;\r\n  queryString = (queryString.trim());\r\n  let queries = queryString.split(/\\s+/);\r\n\r\n  for (let i = 0; i < queries.length; i++) {\r\n    if (i === queries.length - 1) queries[i] = new RegExp(\"\\\\b\" + queries[i], \"i\");\r\n    else queries[i] = new RegExp(\"\\\\b\" + queries[i] + \"\\\\b\", \"i\");\r\n  }\r\n  for (let i = 0; i < queries.length; i++) {\r\n    if (!stringToSearch.match(queries[i])) return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}