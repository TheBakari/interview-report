{"ast":null,"code":"import * as constants from \"../shared/constants\";\nconst AUTH_ENDPOINT = \"http://localhost:3333/login\";\nconst BASE_URL = \"http://localhost:3333/api/\";\n\nfunction getHeaders() {\n  console.assert(sessionStorage.getItem(\"accessToken\"));\n  return {\n    'Content-Type': 'application/json',\n    'Authorization': \"Bearer \" + sessionStorage.getItem(\"accessToken\")\n  };\n} // NB: throw new Error returns an Error obj with property `message`!!!\n\n\nconst getNiceErrorMessage = error => {\n  const errorStr = error.toString();\n\n  if (errorStr.includes(\"Failed to fetch\")) {\n    return constants.CONNECTION_FAILED;\n  } else if (errorStr.includes(\"401\") && sessionStorage.getItem(\"accessToken\")) {\n    return constants.SESSION_EXPIRED;\n  } else if (errorStr.includes(\"400\") || errorStr.includes(\"401\")) {\n    return constants.INVALID_CREDENTIALS;\n  } else {\n    return errorStr;\n  }\n};\n\nconst handleResponse = response => {\n  if (!response.ok) {\n    throw new Error(response.status);\n  }\n\n  return response.json();\n};\n\nexport function authenticate(email, password) {\n  return fetch(AUTH_ENDPOINT, {\n    method: \"POST\",\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(response => {\n    return handleResponse(response);\n  }).then(json => {\n    // console.log(\"Response for auth: \", json);\n    const token = json[\"accessToken\"];\n    sessionStorage.setItem(\"accessToken\", token);\n    sessionStorage.setItem(\"username\", email);\n    return {\n      email,\n      token\n    };\n  }).catch(error => {\n    throw new Error(getNiceErrorMessage(error));\n  });\n}\nexport function clearToken() {\n  console.assert(sessionStorage.getItem(\"accessToken\"));\n  sessionStorage.clear(); // sessionStorage.removeItem(\"accessToken\");\n  // sessionStorage.removeItem(\"username\");\n}\nexport function getData(action, params) {\n  let link = BASE_URL + action;\n  if (params && params.length > 0) link += \"?\" + concatParams(params);\n  return fetch(link, {\n    method: \"GET\",\n    headers: getHeaders()\n  }).then(response => handleResponse(response)).catch(error => {\n    throw new Error(getNiceErrorMessage(error));\n  });\n}\n\nfunction concatParams(params) {\n  let result = params.map(p => `${p.key}=${p.value}`);\n  return result.join(\"&\");\n}\n\nexport function saveData(action, method, data) {\n  let link = BASE_URL + action;\n  return fetch(link, {\n    method: \"POST\",\n    headers: getHeaders(),\n    body: JSON.stringify(data)\n  }).then(response => handleResponse(response)).catch(error => {\n    console.log(error);\n    throw new Error(getNiceErrorMessage(error));\n  });\n}\nexport function deleteData(action, id) {\n  let link = BASE_URL + action + \"/\" + id;\n  return fetch(link, {\n    method: \"DELETE\",\n    headers: getHeaders()\n  }).then(response => handleResponse(response)).catch(error => {\n    console.log(error);\n    throw new Error(getNiceErrorMessage(error));\n  });\n} ////////////////////////////////\n// const headers = new Headers();\n// headers.set('Authorization', 'Basic ' + Buffer.from(email + \":\" + password).toString('base64'));","map":{"version":3,"sources":["C:/Users/Nikola/Desktop/interview-reports/interview-reports/src/services/services.js"],"names":["constants","AUTH_ENDPOINT","BASE_URL","getHeaders","console","assert","sessionStorage","getItem","getNiceErrorMessage","error","errorStr","toString","includes","CONNECTION_FAILED","SESSION_EXPIRED","INVALID_CREDENTIALS","handleResponse","response","ok","Error","status","json","authenticate","email","password","fetch","method","headers","body","JSON","stringify","then","token","setItem","catch","clearToken","clear","getData","action","params","link","length","concatParams","result","map","p","key","value","join","saveData","data","log","deleteData","id"],"mappings":"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","sourcesContent":["import * as constants from \"../shared/constants\";\r\nconst AUTH_ENDPOINT = \"http://localhost:3333/login\";\r\nconst BASE_URL = \"http://localhost:3333/api/\";\r\n\r\nfunction getHeaders() {\r\n  console.assert(sessionStorage.getItem(\"accessToken\"));\r\n  return ({\r\n    'Content-Type': 'application/json',\r\n    'Authorization': \"Bearer \" + sessionStorage.getItem(\"accessToken\")\r\n  });\r\n}\r\n\r\n// NB: throw new Error returns an Error obj with property `message`!!!\r\nconst getNiceErrorMessage = (error) => {\r\n  const errorStr = error.toString();\r\n  if (errorStr.includes(\"Failed to fetch\")) {\r\n    return constants.CONNECTION_FAILED;\r\n  } else if (errorStr.includes(\"401\") && sessionStorage.getItem(\"accessToken\")) {\r\n    return constants.SESSION_EXPIRED;\r\n  } else if (errorStr.includes(\"400\") || errorStr.includes(\"401\")) {\r\n    return constants.INVALID_CREDENTIALS;\r\n  } else {\r\n    return errorStr;\r\n  }\r\n};\r\n\r\nconst handleResponse = (response) => {\r\n  if (!response.ok) {\r\n    throw new Error(response.status);\r\n  }\r\n  return response.json();\r\n};\r\n\r\nexport function authenticate(email, password) {\r\n  return fetch(AUTH_ENDPOINT, {\r\n    method: \"POST\",\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ email, password })\r\n  }).then(response => {\r\n    return handleResponse(response);\r\n  }).then(json => {\r\n    // console.log(\"Response for auth: \", json);\r\n    const token = json[\"accessToken\"];\r\n    sessionStorage.setItem(\"accessToken\", token);\r\n    sessionStorage.setItem(\"username\", email);\r\n    return { email, token };\r\n  }).catch(error => {\r\n    throw new Error(getNiceErrorMessage(error));\r\n  });\r\n}\r\n\r\nexport function clearToken() {\r\n  console.assert(sessionStorage.getItem(\"accessToken\"));\r\n  sessionStorage.clear();\r\n  // sessionStorage.removeItem(\"accessToken\");\r\n  // sessionStorage.removeItem(\"username\");\r\n}\r\n\r\nexport function getData(action, params) {\r\n  let link = BASE_URL + action;\r\n  if (params && params.length > 0) link += \"?\" + concatParams(params);\r\n  return (fetch(link, {\r\n    method: \"GET\",\r\n    headers: getHeaders(),\r\n  }).then(response => handleResponse(response))\r\n    .catch((error) => {\r\n      throw new Error(getNiceErrorMessage(error));\r\n    }));\r\n}\r\n\r\nfunction concatParams(params) {\r\n  let result = params.map(p => `${p.key}=${p.value}`);\r\n  return result.join(\"&\");\r\n}\r\n\r\nexport function saveData(action, method, data) {\r\n  let link = BASE_URL + action;\r\n  return (fetch(link, {\r\n    method: \"POST\",\r\n    headers: getHeaders(),\r\n    body: JSON.stringify(data),\r\n  }).then(response => handleResponse(response))\r\n    .catch(error => {\r\n      console.log(error);\r\n      throw new Error(getNiceErrorMessage(error));\r\n    }));\r\n}\r\n\r\nexport function deleteData(action, id) {\r\n  let link = BASE_URL + action + \"/\" + id;\r\n  return (\r\n    fetch\r\n      (link, {\r\n        method: \"DELETE\",\r\n        headers: getHeaders(),\r\n      })\r\n      .then(response => handleResponse(response))\r\n      .catch(error => {\r\n        console.log(error);\r\n        throw new Error(getNiceErrorMessage(error));\r\n      })\r\n  );\r\n}\r\n\r\n////////////////////////////////\r\n  // const headers = new Headers();\r\n  // headers.set('Authorization', 'Basic ' + Buffer.from(email + \":\" + password).toString('base64'));"]},"metadata":{},"sourceType":"module"}